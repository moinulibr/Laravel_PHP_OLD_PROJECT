<?php

namespace Illuminate\Foundation\Auth;

use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;

trait AuthenticatesUsers
{
    use RedirectsUsers, ThrottlesLogins;

    /**
     * Show the application's login form.
     *
     * @return \Illuminate\View\View
     */
    public function showLoginForm()
    {
        if(request()->is(HS_REQUEST_IS_ROUTE_FOR_MERCHANT_AUTHENTICATESUSERS_SHOWLOGINFORM) == HS_MERCHANT_LOGIN_ROUTE_SET_FOR_AUTHENTICATESUSERS_SHOWLOGINFORM)
        {
            return redirect()->route(HS_MERCHANT_LOGIN_WEB_ROUTE_NAME);
        }
        else if(request()->is(HS_REQUEST_IS_ROUTE_FOR_ADMIN_AUTHENTICATESUSERS_SHOWLOGINFORM) == HS_ADMIN_LOGIN_ROUTE_SET_FOR_AUTHENTICATESUSERS_SHOWLOGINFORM)
        {
            return view('auth.login');
        }else{
            return redirect()->route(HS_MERCHANT_LOGIN_WEB_ROUTE_NAME);
        }
    }

    /**
     * Handle a login request to the application.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Http\Response|\Illuminate\Http\JsonResponse
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function login(Request $request)
    {
        $this->validateLogin($request);

        // If the class is using the ThrottlesLogins trait, we can automatically throttle
        // the login attempts for this application. We'll key this by the username and
        // the IP address of the client making these requests into this application.
        if (method_exists($this, 'hasTooManyLoginAttempts') &&
            $this->hasTooManyLoginAttempts($request)) {
            $this->fireLockoutEvent($request);

            return $this->sendLockoutResponse($request);
        }

        if ($this->attemptLogin($request)) {
            //return $this->sendLoginResponse($request);
            if(Auth::user()->user_approval_status_id != HS_USER_APPROVAL_STATUS_ID_APPROVED)
            {
                Auth::logout();
                return redirect()->route(HS_MERCHANT_LOGIN_WEB_ROUTE_NAME);
            }
            //extra added here
                $user = auth()->user();
				$user->login_status = 1;
                $user->save();
            //extra added here
            if(auth()->user()->role_id != HS_MERCHANT_USER_ROLE_ID || auth()->user()->role_id != HS_DELIVERYMAN_USER_ROLE_ID)
            {
                return $this->sendLoginResponse($request);
            }
            else{
                $user = auth()->user();
				$user->login_status = 0;
                $user->save();
                Auth::logout();
                return redirect()->route(HS_MERCHANT_LOGIN_WEB_ROUTE_NAME);
            }
        }

        // If the login attempt was unsuccessful we will increment the number of attempts
        // to login and redirect the user back to the login form. Of course, when this
        // user surpasses their maximum number of attempts they will get locked out.
        $this->incrementLoginAttempts($request);

        return $this->sendFailedLoginResponse($request);
    }

    /**
     * Validate the user login request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return void
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    protected function validateLogin(Request $request)
    {
        $request->validate([
            $this->username() => 'required|string',
            'password' => 'required|string',
        ]);
    }

    /**
     * Attempt to log the user into the application.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return bool
     */
    protected function attemptLogin(Request $request)
    {
        return $this->guard()->attempt(
            $this->credentials($request), $request->filled('remember')
        );
    }

    /**
     * Get the needed authorization credentials from the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    protected function credentials(Request $request)
    {
        return $request->only($this->username(), 'password');
    }

    /**
     * Send the response after the user was authenticated.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    protected function sendLoginResponse(Request $request)
    {
        $request->session()->regenerate();

        $this->clearLoginAttempts($request);

        if ($response = $this->authenticated($request, $this->guard()->user())) {
            return $response;
        }

        if($request->wantsJson())
        {
            new JsonResponse([], 204);
        }
        else{
            if(Auth::check() && Auth::user()->dashboard_type == dashboard_type_normal_user_HS){
                return redirect()->route(landing_url_route_HS);
            }
            if(Auth::check() && Auth::user()->dashboard_type > dashboard_type_normal_user_HS){
                return redirect()->route('home');
            }
        }


       //its was real code
        /*
        $request->session()->regenerate();

        $this->clearLoginAttempts($request);

        if ($response = $this->authenticated($request, $this->guard()->user())) {
            return $response;
        }

        return $request->wantsJson()
                    ? new Response('', 204)
                    : redirect()->intended($this->redirectPath());
        */

    }

    /**
     * The user has been authenticated.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  mixed  $user
     * @return mixed
     */
    protected function authenticated(Request $request, $user)
    {
        //
    }

    /**
     * Get the failed login response instance.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Symfony\Component\HttpFoundation\Response
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    protected function sendFailedLoginResponse(Request $request)
    {
        throw ValidationException::withMessages([
            $this->username() => [trans('auth.failed')],
        ]);
    }

    /**
     * Get the login username to be used by the controller.
     *
     * @return string
     */
    public function username()
    {
        return 'email';
    }

    /**
     * Log the user out of the application.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function logout(Request $request)
    {
        //extra added here
        $user = auth()->user();
        $user->login_status = 0;
        $user->save();
        //extra added here

        $this->guard()->logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        if ($response = $this->loggedOut($request)) {
            return $response;
        }

        return $request->wantsJson()
            ? new Response('', 204)
            : redirect('/');
    }

    /**
     * The user has logged out of the application.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return mixed
     */
    protected function loggedOut(Request $request)
    {
        //
    }

    /**
     * Get the guard to be used during authentication.
     *
     * @return \Illuminate\Contracts\Auth\StatefulGuard
     */
    protected function guard()
    {
        return Auth::guard();
    }
}
