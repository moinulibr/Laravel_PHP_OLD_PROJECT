


	add a extra fields in database schema
	=====================================
	
	php artisan make:migration add_paid_to_users    // php artisan make:migration add_NewFieldName_to_existingTableName

	public function up()
	{
   	 Schema::table('users', function($table) {
        	$table->integer('paid');
    	});
	}

	and also change it
	
	public function down()
	{
    		Schema::table('users', function($table) {
        		$table->dropColumn('paid');
    		});
	}
		Then....
	


	php artisan migrate

	php artisan make:migration add_store_id_to_users_table --table=users   [from 5.6]
	=================From Sumon vai================

	php artisan make:migration add_verified_colum_to_users_table

	public function up()
	{
   	     Schema::table('users', function($table) {
        	$table->integer('paid');
    	   });
	}

	and also change it
	
	public function down()
	{
    	   Schema::table('users', function($table) {
        	$table->dropColumn('paid');
    	   });
	}
		Then....
	php artisan migrate

======================================================================================

	php artisan make:migration add_status_to_countries ###Command line
	

	#### Migration file
	<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddStatusToCountries extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('countries', function (Blueprint $table) {
            $table->boolean('status',1)->default(1);
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('countries', function (Blueprint $table) {
            $table->dropColumn('status');
        });
    }
}

	### php artisan migrate



/********************************************************************/
			drop column
/********************************************************************/
	remove / drop column 
	php artisan make:migration remove_alix_variation_id_from_products --table=products

	
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class RemoveAlixVariationIdFromProducts extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        if (Schema::hasColumn('products', 'alix_variation_id')){
            Schema::table('products', function (Blueprint $table) {
                $table->dropColumn('alix_variation_id');
            });
        }
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('products', function (Blueprint $table) {
            //
        });
    }
}



/***********************************************************************************************************/
			Remove Multiple Column using Migration
/***********************************************************************************************************/

	 $table->dropColumn(['body', 'title']);

https://www.itsolutionstuff.com/post/how-to-remove-column-from-table-in-laravel-migrationexample.html









/***********************************************************************************************************/
				add or remove enum option/parameter
/***********************************************************************************************************/

	php artisan make:migration add_variant_enumparameter_to_products --table=products
	


<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class AddVariantEnumParameterToProducts extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('products', function (Blueprint $table) {
            \DB::statement("ALTER TABLE `products` CHANGE `product_type` `product_type` ENUM('normal','affiliate','variant') CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'normal';");
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('products', function (Blueprint $table) {

        });
    }

}



		Its for nullable 
	------------------------------------
	ALTER TABLE `users` CHANGE `status` `state` INT(10) UNSIGNED NULL DEFAULT NULL;


















======================================================================
when add a new column
$table->string('alix_order_data',255)->nullable()->after('note');







//====================add new column with comment========================
php artisan make:migration add_variation_sku_colum_to_product_variants_table

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddVariationSkuColumToProductVariantsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('product_variants', function (Blueprint $table) {
            $table->string('variation_sku',50)->nullable()->after('alix_variation_id')->comment('bigbuy variation sku');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('product_variants', function (Blueprint $table) {
            //
        });
    }
}
//====================add new column with comment========================





	//=============================== existing column add comment=======================
	php artisan make:migration add_comment_in_da_product_id_to_products --table=products

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddCommentInDaProductIdToProducts extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('products', function (Blueprint $table) {
            \DB::statement("ALTER TABLE `products` CHANGE `da_product_id` `da_product_id` INT(11) NULL DEFAULT NULL COMMENT 'this is for all dropshipping product id';");
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('products', function (Blueprint $table) {
            //
        });
    }
}



-----------------------------------------------------------------------------------------
 php artisan make:migration add_category_type_to_sliders
	
class AddCategoryTypeToSliders extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        if (!Schema::hasColumn('sliders', 'category_type')){
            Schema::table('sliders', function (Blueprint $table) {
                $table->string('category_type',15)->nullable()->after('id')->comment('template type');
            });
        }
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('sliders', function (Blueprint $table) {
            $table->dropIfExists('category_type');
        });
    }
}
