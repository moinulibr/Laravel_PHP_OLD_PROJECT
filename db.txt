

	
	#
	composer require spatie/laravel-backup

	php artisan vendor:publish --provider="Spatie\Backup\BackupServiceProvider"

	config/database.php
		##
		in the mysql array.... have to 
		 'dump' => [
                	'dump_binary_path' =>'F:\xampp\mysql\bin',
                	'timeout' => 60*5,
            		],
		
		** php artisan backup:run

		in the controller...

		Artisan::call('backup:run'); [for getting zip from database]

		# for download
		 $files = File::allFiles('storage/app/Laravel');
		foreach ($files as $item)
		{
		        $path = storage_path("app/Laravel/".$item->getFileName());
        		return response()->download($path);	
		}
		
		# For Delete All
		# for download
		 $files = File::allFiles('storage/app/Laravel');
		foreach ($files as $item)
		{
        		Storage::delete('Laravel/'.$item->getFileName());	
		}




	/*
	|-----------------------------------------------------------------------
	| Database Backup By Cronjob From Live Server
	|-----------------------------------------------------------------------
	/*
		Cron job setup
		=============
	
		In The Comman Input Field
		#---------------
		/usr/local/bin/php /home/dotcaayc/digilab.dotcoom.com/cron.php
		#---------------

	/*
	|-------------------------------------------------------------------------
	| In the cron.php file, which is in the root folder in the laravel project
	| its below or beside of .env file.. 
	|-------------------------------------------------------------------------
	/*		
		cron.php
		========
	    #The URL that we want to GET.
            $url = 'https://digilab.dotcoom.com/database-backup-run-cron';
            #Use file_get_contents to GET the URL in question.
            $contents = file_get_contents($url);
	
	Now in my laravel project ... 

		web.php
		======

	Route::get('database-backup-run-cron','CronController@databaseBackRun')->name('databaseBackRundf');


	Now all are the before process

	CronController.php
	databaseBackRun()
	{
	 	//Artisan::call('schedule:run'); its working
      	 	#use Illuminate\Support\Facades\Artisan;
        	Artisan::call('backup:run'); 
	}







