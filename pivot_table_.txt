	
		brand , merchant , => brand_merchant ####[jodio merchant table ar nam holo VendorInformation, and merchant id holo users table ar id, mne holo user model]		
================================================================================================================================================================================================================================
	
			From Admi Panel
	====================================================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;
use App\Models\VendorInformation;
use App\Models\BrandMerchant;
class Brand extends Model
{
    protected $fillable = ['name','logo','slug','web_address','email','created_by','updated_at'];

    //public $timestamps = false;

    /* public function setSlugAttribute($value)
    {
        $this->attributes['slug'] = str_replace(' ', '-', $value);
    } */


    public function merchants()
    {
        return $this->belongsToMany(VendorInformation::class,'brand_merchant','brand_id', 'vendor_information_id')
                        ->withPivot('deleted_at')->withTimestamps();
    }

}

	BrandController.php
	=====================
    //*** POST Request
    public function store(Request $request)
    {
        //--- Validation Section
        $rules = [
            'name' => 'required|min:2|max:255',
            'email' => 'required|email|unique:brands,email',
            'web_address' => 'required|min:2|max:255',
            'logo' => 'mimes:jpeg,jpg,png,svg',
            'slug' => 'required|min:3|unique:brands|regex:/^[a-zA-Z0-9\s-]+$/'
            ];
        $customs =[
            'name.required'   => 'Name is required.',
            'name.min'        => 'Name minimum 2 characters.',
            'name.max'        => 'Name maximum 255 characters.',

            'email.required'  => 'Email is required.',
            'email.unique'    => 'This slug has already been taken.',

            'web_address.required' => 'Web Address is required.',
            'web_address.min'      => 'Web Address minimum 2 characters.',
            'web_address.max'      => 'Web Address maximum 255 characters.',

            'logo.mimes'      => 'Logo Type is Invalid.',

            'slug.required'   => 'Slug is required.',
            'slug.unique'     => 'This slug has already been taken.',
            'slug.regex'      => 'Slug Must Not Have Any Special Characters.'
            ];
        $validator = Validator::make($request->all(), $rules, $customs);

        if ($validator->fails()) {
            return response()->json(array('status' => 'errors','error' => $validator->getMessageBag()->toArray()));
        }
        //--- Validation Section Ends

        //--- Logic Section
        $data = new Brand();
        $input = $request->except('_token') ;//$request->all();
        
        if ($file = $request->file('logo'))
        {
            $name = time().str_replace(' ', '', $file->getClientOriginalName());
            $file->move('assets/images/brands',$name);
            $input['logo'] = $name;
        }
        $data->fill($input)->save();
        //cache()->forget('brands');
        //--- Logic Section Ends
        $data->merchants()->attach($request->merchant_id);
        //--- Redirect Section
        $msg = 'New Data Added Successfully.';

        return response()->json([
            'status' => true,
            'message' => $msg 
        ]);
        //--- Redirect Section Ends
    }
  public function update(Request $request)
    {
        $rules = [
            'name' => 'required|min:2|max:255',
            'email' => 'required|email|unique:brands,email,'.$request->id.'',
            'web_address' => 'required|min:2|max:255',
            'logo' => 'mimes:jpeg,jpg,png,svg',
            'slug' => 'required|min:2|unique:brands,slug,'.$request->id.'|regex:/^[a-zA-Z0-9\s-]+$/'
            ];
        $customs =[
            'name.required'   => 'Name is required.',
            'name.min'        => 'Name minimum 2 characters.',
            'name.max'        => 'Name maximum 255 characters.',

            'email.required'  => 'Email is required.',
            'email.unique'    => 'This email has already been taken.',

            'web_address.required' => 'Web Address is required.',
            'web_address.min'      => 'Web Address minimum 2 characters.',
            'web_address.max'      => 'Web Address maximum 255 characters.',

            'logo.mimes'      => 'Logo Type is Invalid.',

            'slug.required'   => 'Slug is required.',
            'slug.unique'     => 'This slug has already been taken.',
            'slug.regex'      => 'Slug Must Not Have Any Special Characters.'
            ];
        $validator = Validator::make($request->all(), $rules, $customs);

        if ($validator->fails()) {
            return response()->json(array('status' => 'errors','error' => $validator->getMessageBag()->toArray()));
        }
        //--- Validation Section Ends

        //--- Logic Section
        $data = Brand::findOrFail($request->id);
        $input = $request->all();
            if ($file = $request->file('logo'))
            {
                $name = time().str_replace(' ', '', $file->getClientOriginalName());
                $file->move('assets/images/brands',$name);
                if($data->logo != null)
                {
                    if (file_exists(public_path().'/assets/images/brands/'.$data->logo)) {
                        unlink(public_path().'/assets/images/brands/'.$data->logo);
                    }
                }
                $input['logo'] = $name;
            }

        $data->update($input);
        //cache()->forget('categories');
        //--- Logic Section Ends
        
        $data->merchants()->sync($request->merchant_id);
        //--- Redirect Section
        $msg = 'Data Updated Successfully.';

        return response()->json([
            'status' => true,
            'message' => $msg 
        ]);
        //--- Redirect Section Ends
    }







================================================================================================================		

		From Merchant angle
	========================================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use App\Traits\AdminLog;
use App\Models\Brand;
class VendorInformation extends Model
{
	use AdminLog;
	
    protected $fillable = ['user_id','shop_name', 'shop_phone', 'owner_name' , 'attachments','text','admin_warning','warning_reason','status'];

    public function user()
    {
    	return $this->belongsTo('App\Models\User')->withDefault(function ($data) {
			foreach($data->getFillable() as $dt){
				$data[$dt] = __('Deleted');
			}
		});
    }


	public function merchantBrands()
	{
		return $this->belongsToMany(Brand::class,'brand_merchant','vendor_information_id', 'brand_id')
            ->withPivot('deleted_at')->withTimestamps();
	}

}		
	
	User.php model 
	-------------------
<?php

namespace App\Models;

use Illuminate\Foundation\Auth\User as Authenticatable;
class User extends Authenticatable implements JWTSubject
{
    public function merchantInformation(){
        return $this->hasOne(VendorInformation::class);
    }
}?>
	

	controller theke model wise call
	===
        $brandIds = Auth::guard('web')->user()->merchantInformation?Auth::guard('web')->user()->merchantInformation->merchantBrands?Auth::guard('web')->user()->merchantInformation->merchantBrands->pluck('id')->toArray():NULL:NULL;
        $brandData['brands'] = Brand::whereNull('deleted_at')
                                ->when($brandIds , function ($q) use($brandIds){
                                    $q->whereIn('id',$brandIds);
                                })
                                ->get();

	
================================================================================================================	
	
	
	
	
	
	
	
	
	
	
	
	





